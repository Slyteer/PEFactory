import pefile
import mmap
import os

def align(val_to_align, alignment):
    return ((val_to_align + alignment - 1) / alignment) * alignment

exe_path = '../putty.exe'
# STEP 0x01 - Resize the Executable
# Note: I added some more space to avoid error
print ("[*] STEP 0x01 - Resize the Executable")

original_size = os.path.getsize(exe_path)
print ("\t[+] Original Size = %d" % original_size)
fd = open(exe_path, 'a+b')
map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
map.resize(original_size + 0x2000)
map.close()
fd.close()

print ("\t[+] New Size = %d bytes\n" % os.path.getsize(exe_path))

# STEP 0x02 - Add the New Section Header
print ("[*] STEP 0x02 - Add the New Section Header")

pe = pefile.PE(exe_path)
number_of_section = pe.FILE_HEADER.NumberOfSections
last_section = number_of_section - 1
file_alignment = pe.OPTIONAL_HEADER.FileAlignment
section_alignment = pe.OPTIONAL_HEADER.SectionAlignment
new_section_offset = (pe.sections[number_of_section - 1].get_file_offset() + 40)

# Look for valid values for the new section header
raw_size = align(0x1000, file_alignment)
virtual_size = align(0x1000, section_alignment)
raw_offset = align((pe.sections[last_section].PointerToRawData +
                    pe.sections[last_section].SizeOfRawData),
                   file_alignment)

virtual_offset = align((pe.sections[last_section].VirtualAddress +
                        pe.sections[last_section].Misc_VirtualSize),
                       section_alignment)

# CODE | EXECUTE | READ | WRITE
characteristics = 0xE0000020
# Section name must be equal to 8 bytes
name = ".axc" + (4 * '\x00')
print(name)
# Create the section
# Set the name
pe.set_bytes_at_offset(new_section_offset,name)
print ("\t[+] Section Name = %s" % name)
# Set the virtual size
pe.set_dword_at_offset(new_section_offset + 8, virtual_size)
print ("\t[+] Virtual Size = %s" % hex(virtual_size))
# Set the virtual offset
pe.set_dword_at_offset(new_section_offset + 12, virtual_offset)
print ("\t[+] Virtual Offset = %s" % hex(virtual_offset))
# Set the raw size
pe.set_dword_at_offset(new_section_offset + 16, raw_size)
print ("\t[+] Raw Size = %s" % hex(raw_size))
# Set the raw offset
pe.set_dword_at_offset(new_section_offset + 20, raw_offset)
print ("\t[+] Raw Offset = %s" % hex(raw_offset))
# Set the following fields to zero
pe.set_bytes_at_offset(new_section_offset + 24, (12 * '\x00'))
# Set the characteristics
pe.set_dword_at_offset(new_section_offset + 36, characteristics)
print ("\t[+] Characteristics = %s\n" % hex(characteristics))